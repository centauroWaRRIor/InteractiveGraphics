// generated by Fast Light User Interface Designer (fluid) version 1.0008

#include "alignment_panel.h"

Fl_Window *alignment_window=(Fl_Window *)0;

Fl_Input *horizontal_input=(Fl_Input *)0;

Fl_Input *vertical_input=(Fl_Input *)0;

Fl_Input *snap_input=(Fl_Input *)0;

static void cb_Close(Fl_Button*, void*) {
  alignment_window->hide();
}

Fl_Input *header_file_input=(Fl_Input *)0;

Fl_Input *code_file_input=(Fl_Input *)0;

Fl_Light_Button *include_H_from_C_button=(Fl_Light_Button *)0;

Fl_Choice *i18n_type_chooser=(Fl_Choice *)0;

Fl_Menu_Item menu_i18n_type_chooser[] = {
 {"None", 0,  0, 0, 0, 0, 0, 14, 0},
 {"GNU gettext", 0,  0, 0, 0, 0, 0, 14, 0},
 {"POSIX catgets", 0,  0, 0, 0, 0, 0, 14, 0},
 {0}
};

Fl_Input *i18n_include_input=(Fl_Input *)0;

Fl_Input *i18n_file_input=(Fl_Input *)0;

Fl_Input *i18n_set_input=(Fl_Input *)0;

Fl_Input *i18n_function_input=(Fl_Input *)0;

Fl_Window* make_alignment_window() {
  Fl_Window* w;
  { Fl_Window* o = alignment_window = new Fl_Window(365, 340, "Preferences");
    w = o;
    { Fl_Box* o = new Fl_Box(10, 25, 130, 130, "Alignment:");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Input* o = horizontal_input = new Fl_Input(90, 35, 40, 20, "Horizontal:");
      o->type(2);
      o->box(FL_THIN_DOWN_BOX);
      o->callback((Fl_Callback*)alignment_cb, (void*)(1));
      o->when(FL_WHEN_RELEASE|FL_WHEN_ENTER_KEY);
    }
    { Fl_Input* o = vertical_input = new Fl_Input(90, 65, 40, 20, "Vertical:");
      o->type(2);
      o->box(FL_THIN_DOWN_BOX);
      o->callback((Fl_Callback*)alignment_cb, (void*)(2));
      o->when(FL_WHEN_RELEASE|FL_WHEN_ENTER_KEY);
    }
    { Fl_Input* o = snap_input = new Fl_Input(90, 95, 40, 20, "Snap:");
      o->type(2);
      o->box(FL_THIN_DOWN_BOX);
      o->callback((Fl_Callback*)alignment_cb, (void*)(3));
      o->when(FL_WHEN_RELEASE|FL_WHEN_ENTER_KEY);
    }
    { Fl_Button* o = new Fl_Button(295, 305, 60, 25, "Close");
      o->callback((Fl_Callback*)cb_Close);
    }
    { Fl_Box* o = new Fl_Box(10, 175, 345, 120, "Output File Names:");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = new Fl_Box(20, 185, 325, 15, "Use \"name.ext\" to set name or just \".ext\" to set only extension.");
      o->labelsize(10);
      o->align(132|FL_ALIGN_INSIDE);
    }
    { Fl_Input* o = header_file_input = new Fl_Input(100, 205, 245, 20, "Header File:");
      o->box(FL_THIN_DOWN_BOX);
      o->textfont(4);
      o->callback((Fl_Callback*)header_input_cb, (void*)(1));
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Input* o = code_file_input = new Fl_Input(100, 235, 245, 20, "Code File:");
      o->box(FL_THIN_DOWN_BOX);
      o->textfont(4);
      o->callback((Fl_Callback*)code_input_cb, (void*)(1));
      o->when(FL_WHEN_CHANGED);
    }
    { Fl_Light_Button* o = include_H_from_C_button = new Fl_Light_Button(100, 265, 170, 20, "Include Header from Code");
      o->value(1);
      o->labelsize(12);
      o->callback((Fl_Callback*)include_H_from_C_button_cb);
    }
    { Fl_Box* o = new Fl_Box(150, 25, 205, 130, "Internationalization:");
      o->box(FL_ENGRAVED_FRAME);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Choice* o = i18n_type_chooser = new Fl_Choice(220, 35, 125, 20, "Use:");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)i18n_type_cb);
      o->menu(menu_i18n_type_chooser);
    }
    { Fl_Input* o = i18n_include_input = new Fl_Input(220, 65, 125, 20, "#include:");
      o->box(FL_THIN_DOWN_BOX);
      o->textfont(4);
      o->callback((Fl_Callback*)i18n_text_cb);
      o->hide();
    }
    { Fl_Input* o = i18n_file_input = new Fl_Input(220, 95, 125, 20, "File:");
      o->box(FL_THIN_DOWN_BOX);
      o->textfont(4);
      o->callback((Fl_Callback*)i18n_text_cb);
      o->hide();
    }
    { Fl_Input* o = i18n_set_input = new Fl_Input(220, 125, 125, 20, "Set:");
      o->type(2);
      o->box(FL_THIN_DOWN_BOX);
      o->textfont(4);
      o->callback((Fl_Callback*)i18n_text_cb);
      o->hide();
    }
    { Fl_Input* o = i18n_function_input = new Fl_Input(220, 95, 125, 20, "Function:");
      o->box(FL_THIN_DOWN_BOX);
      o->textfont(4);
      o->callback((Fl_Callback*)i18n_text_cb);
      o->hide();
    }
    o->set_modal();
    o->end();
  }
  return w;
}
extern void i18n_cb(Fl_Choice *,void *);
