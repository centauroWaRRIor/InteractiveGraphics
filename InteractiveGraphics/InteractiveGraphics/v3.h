#pragma once

#include<iostream>
using std::ostream;
using std::istream;

class V3 {
	// this allows to overload the * for scalars that are to the left of vector
	friend V3 operator*(float scalarLeft, V3 &vectorRight);
	
	// overloaded stram insertion operator; cannot be member function
	// if we want to invoke it using cout << someVector
	friend ostream& operator<<(ostream &, const V3 &);

	// overloaded stram extraction operator; cannot be member function
	// if we want to invoke it using cout >> someVector
	friend istream& operator>>(istream &, V3 &);
private:
	// depending on context: vector xyz components or point coordinates
	float xyz[3];

	// returns same point but in a new coordinate system specified
	// by an origin and the 3 new basis vectors (assumed orthonormal)
	V3 thisPointInNewCoordSystem(
		const V3 &origin,
		const V3 &newBasisVectorX,
		const V3 &newBasisVectorY,
		const V3 &newBasisVectorZ) const;
public:
	// constructors (builds a 0 vector by default)
	V3(float x=0, float y=0, float z=0);
	//V3() {}; // No need for this since I'm specifying default values above

	// copy constructor
	// not really needed in this class since automatic shallow copies from
	// compiler would be enough but it doesn't hurt to implement one as an exercise
	// must receive a reference to prevent infinite recursions
	V3(const V3 &vectorToCopy);

	//~V3(); // Default constructor is ok since class doesn't deal with dynamic data

	// overloaded assignment operator
	// Again I'm only implemeting this as exercise. For this class, autogenerated
	// behavior by compiler is probably good enough.
	// const return avoids (v1=v2)=v3.
	// (That is bad not only because is weird syntax but also 
	// because v1 = v2 and v1 = v3 but v2 is never set in that case)
	// return reference does allow for cascaded assignments such as v1 = v2 = v3
	// (v1.operator=(v2.operator(v3)) is allowed and good syntax
	const V3& operator=(const V3 &right);

	// access for read/write
	float& operator[](int i);

	// addition of two vectors
	V3 operator+(const V3 &right) const;
   
	// substraction of two vectors
	V3 operator-(const V3 &right) const;
   
	// dot product
	float operator*(const V3 &right) const;

	// cross product
	V3 operator^(const V3 &right) const;
   
	// multiplication by scalar
	V3 operator*(float scalar) const;

	// division by scalar
	V3 operator/(float scalar) const;

	// normalization of this vector
	void normalize(void);

	// length computation
	float length(void) const;

	// access for exclusive reads (no writes)
	float getX() const { return xyz[0]; }
	float getY() const { return xyz[1]; }
	float getZ() const { return xyz[2]; }

	// set and get color using unsigned int format
	void setFromColor(unsigned int color);
	unsigned int getColor() const;

	// rotation of "this" point about arbitrary axis
	void rotateThisPointAboutAxis(const V3 &axisOrigin, const V3 &axisDirection, float theta);

	// rotation of "this" vector about arbitrary direction
	void rotateThisVectorAboutDirection(const V3 &direction, float theta);
};